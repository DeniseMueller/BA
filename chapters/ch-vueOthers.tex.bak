\subsection{Andere Frameworks}
Analog zu Vue.js existieren weitere Bibliotheken bzw. Frameworks, die die Anforderungen ebenfalls als Reactive Programming betreiben und mit dem Entwurfsmuster \ac{MVVM} oder \ac{MVC} arbeiten. Ein Beispiel ist \textbf{React.js}.
React.js ist eine von Facebook erstellte JavaScript Bibliothek, die dem Entwickler beim Erstellen von Oberfl\"achen hilft. Whatsapp, Instagram und Facebook nutzen bereits React.js. Das Ziel, das React.js verfolgt, ist es einen einfacheren Code zu schreiben, um die einzelnen Bestandteile besser zu verstehen und weniger komplex zu halten. Die wesentlichen Bestandteile von React.js sind die Komponentenarchitektur, der virtuelle \ac{DOM} und die Browserkompatibilit\"at.\\
Die Komponente von React.js sind \"aquivalent zu den Web Komponenten, die mit \texttt{React.createClass} erstellt wurden. Innerhalb gibt es Funktionen wie etwa \texttt{render}, die \ac{HTML} Dokumente f\"ur das Web pr\"asentierbar machen und bei jeder \"Anderung aufgerufen werden. Dazu k\"onnen eigene Funktionen definiert werden. Bei React.js wird die Standard \texttt{onClick} Methode als Attribut auf den Button gesetzt und durch eine geschweifte Klammer kann auf die Funktionen verwiesen werden (\texttt{<button onClick={this.add}>}). Ein besonderes Attribut von React.js ist das \texttt{State}. Dieses Attribut beinhaltet die zu ver\"andernden Daten und kann die Aktualisierung im \ac{HTML} Dokument durchf\"uren. Somit muss auf die Anpassung des \ac{DOM} keine R\"ucksicht genommen werden.
Die Komponente werden in React.js innerhalb der \texttt{render} Methode definiert, da React.js JSX eine schlanke Syntaxerweiterung zum Schreiben von Markups verwendet. \"Anderungen am Stil der Seite oder des Buttons werden innerhalb der \texttt{createClass}, in der auch die \texttt{render} Methode f\"ur die Definition des \ac{HTML} Dokuments implementiert wird, erstellt (\texttt{return {backgroundColor: \#fff};}). Hierbei wird erkannt, dass die \"ubliche bekannte Trennung der Bereiche \ac{HTML}, \ac{CSS} und JavaScript nicht stattfindet\cite{Kogel2015}. \\
Die Bearbeitung durch JSX in React.js wird in der Regel nicht direkt in dem \ac{DOM} des Browsers stattfinden, sondern in einem virtuellen \ac{DOM}, das zur Bearbeitung genutzt wird. Bei einer Ver\"anderung wird jeweils ein neues Objekt, also ein neuer virtueller \ac{DOM}, erstellt. Dabei wird der virtuelle \ac{DOM} mit dem Browser \ac{DOM} verglichen und aufgelistet. Die \"Anderungen werden erst zum Zeitpunkt des Batch an den Browser geschickt und aktualisiert\cite{Skirzynski2015}. Vue.js ist React.js  in vielen Bereichen \"ahnlich. Beiden nutzen einen virtuellen \ac{DOM}, eine reaktive, zusammensetzbare Benutzeroberfl\"ache und detektieren \"Anderungen unmittelbar. Die folgende Auflistung zeigt die Unterschiede in Vue.js und React.js in der Leistung, im Templateing und JSX und der Skalierbarkeit des Systems.
\begin{itemize}
\item \textbf{Leistung:} Vue.js und React.js sind in hinsicht der Leistungin etwa gleich schnell. Damit ist dieser Punkt f\"ur die Entscheidung nicht relevant.\cite{VueDokumentationOther2018}.
\item \textbf{Templating} Im Gegensatz zu Vue.js ist in React.js \ac{HTML} und \ac{CSS} zusammen mit JavaScript mit Hilfe von JSX geschrieben. Ebenso werden Werkzeuge wie die Typen\"uberpr\"ufung in React.js besser unterst\"utzt\cite{VueDokumentationOther2018}. Die konkrete Trennung zwischen JavaScript, \ac{HTML} und \ac{CSS} ist in Vue.js deutlich und \"ubersichtlicher\cite{Haupt2018}. F\"ur viele Entwickler, die in \ac{HTML} Erfahrung haben, ist es einfacher, den Code zu lesen und zu interpretieren\cite{VueDokumentationOther2018}.
\item \textbf{Skalierbarkeit:} F\"ur die Skalierung gr\"o\ss{}erer Anwendungen gibt es in Vue.js sowie in React.js Routing L\"osungen. In React.js gibt es die Frameworks Fluex oder Redux und in Vue.js das Vuex. Auch Redux kann in Vue.js integriert werden\cite{Peters2017}. Vue.js beinhaltet einen \ac{CLI}, das die Einbindung neuer Projekte mit Werkzeugen zum Bauen von Projekte wie webpack oder Browserify erm\"oglicht.
In React.js m\"ussen die Build Systeme, zum Bauen des Projekts, vom Entwickler angeeignet werden\cite{VueDokumentationOther2018}.
\end{itemize}
Ein weiteres Framework, das bei der Frontend Entwicklung hilft, \textbf{Angular.js}. Angular.js ist bekannter als Vue.js oder React.js. Viele Komponenten oder Syntaxen von Angular.js waren f\"ur Vue.js ein Vorbild, weshalb es vielen Angular.js Entwicklern einfacher f\"allt sich in Vue.js einzuarbeiten. Angular.js ist deutlich komplexer und besitzt mehr Vorgabe in Hinsicht der Softwarearchitektur als Vue.js. Ebenso ist die Leistung von Vue.js deutlich besser und leichter zu optimieren. \par\medskip 
Die Entscheidung f\"ur Vue.js basierte auf der immer gr\"o\ss{}erer werdenden Popularit\"at\cite{GoogleTrends2018}.  F\"ur die Gr\"o\ss{}e des zu implementierenden Projekts ist Angular.js zu \"uberladen. Vue.js oder React sind kompakt genug, f\"ur Webanwendungen zur Darstellung von Positionsdaten. %TODO Warum Vue und nicht React. Trennung CSS HTML JavaScript
Dabei ist die Leistung sehr entscheidend. \newline
Eine Studie aus Schweden hat die Performance von Angular 2, Aurelia,  Ember, Vue und weiteren verglichen. Dabei wurden die Befehle \texttt{Create}, \texttt{Delete} und \texttt{Update} mit jeweils 1000 Reihen getestet.\cite{Svensson2015}
\begin{itemize}
\item \textbf{Angular.js 2:} Im Ganzen hatte Angular 2 in jedem Testszenario die beste Leistung, dabei bbietet Angular 2 eine deutliche Verbesserung zu seinem Vorg\"anger 1.5\cite{Svensson2015}.
\item \textbf{Aurelia:} Aurelia hat in dem Szenario das zweitbeste Ergebnis erziehlt, jedoch schnitt Aurelia bei dem Befehl Update mit unter Anderem als schlechtestestes Framework ab\cite{Svensson2015}.
\item \textbf{Ember:} Eins der schlechtesten Frameworks ist Ember. Nur in dem Befehl Delete erreichte Ember einen durchschnittliches Ergebnis\cite{Svensson2015}.
\item \textbf{Vue.js:} Vue.js ist eins der schnellsten Frameworks. Vor allem bei den Befehlen Create und Update\cite{Svensson2015}.
\end{itemize}

